trigger:
  branches:
    include:
      - main  # Trigger on commits to the 'main' branch

variables:
  - template: variables/vars.yaml  # Import variables from vars.yaml

stages:
- stage: Build&Push
  displayName: "Build and Push Docker Image"
  jobs:
    - job: ImageBuild
      displayName: "Build and Push Image to ACR"
      pool:
        vmImage: "$(vmImageName)"

      steps:
      - task: AzureCLI@2
        displayName: "Login to Azure and ACR"
        inputs:
          azureSubscription: "$(azureSubscription)"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: |
            az acr login --name $(acrName)

      - task: Docker@2
        displayName: "Build & Push nodeApp Docker Image to ACR"
        inputs:
          containerRegistry: "$(serviceACRConnection)"
          repository: "$(appRepoName)"
          command: "buildAndPush"
          Dockerfile: "azure-vote/Dockerfile-for-app-service"
          buildContext: 'azure-vote'
          tags: |
            $(Build.BuildId)      

      - task: Docker@2
        displayName: "Build & Push reddis Docker Image to ACR"
        inputs:
          containerRegistry: "$(serviceACRConnection)"
          repository: "$(redisRepoName)"
          command: "buildAndPush"
          Dockerfile: "azure-vote/Dockerfile"
          buildContext: 'azure-vote'
          tags: |
            $(Build.BuildId)

      - script: |
          datetime=$(date +%Y%m%d%H%M%S)
          manifestName="voteapp_$(Build.BuildId)_${datetime}"
          echo "##vso[task.setvariable variable=manifestName]$manifestName"
        displayName: "Generate Manifest Name"
        name: GenerateManifestName

- stage: GenerateManifest
  displayName: "Generate and Publish Manifest"
  dependsOn: BuildImage
  condition: succeeded()

  jobs:
    - job: ManifestJob
      displayName: "Rename Manifest and Publish Artifact"
      pool:
        vmImage: "$(vmImageName)"
      
      steps:
      - task: CopyFiles@2
        displayName: "Rename and Copy Manifest File"
        inputs:
          SourceFolder: ".."  # Folder where the original manifest is located
          Contents: "$(manifestFileName)"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"
          flattenFolders: true

      - script: |
          mv "$(Build.ArtifactStagingDirectory)/$(manifestFileName)" "$(Build.ArtifactStagingDirectory)/$(manifestName).yaml"
        displayName: "Rename Manifest File"
      
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: "$(artifactName)"
        displayName: "Publish Manifest Artifact"